name: Edit Discussion Comment with Link Previews

on:
  discussion_comment:
    types: [created, edited]

permissions:
  discussions: write

jobs:
  unfurl:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install @octokit/graphql jsdom

      - name: Run script to update comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_ID_NUMERIC: ${{ github.event.comment.id }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          node <<'EOF'
          import { graphql } from "@octokit/graphql";
          import { JSDOM } from "jsdom";

          const token = process.env.GH_TOKEN;
          const commentIdNumeric = process.env.COMMENT_ID_NUMERIC;
          const originalBody = process.env.COMMENT_BODY;
          const owner = process.env.REPO_OWNER;
          const repo = process.env.REPO_NAME;

          const graphqlWithAuth = graphql.defaults({
            headers: {
              authorization: `token ${token}`,
            },
          });

          async function run() {
            // 1. Buscar o Node ID do comentário pelo ID numérico
            const query = `
              query($owner: String!, $repo: String!, $commentId: Int!) {
                repository(owner: $owner, name: $repo) {
                  discussionComments(first: 100) {
                    nodes {
                      id
                      databaseId
                      body
                    }
                  }
                }
              }
            `;

            // Como não existe query direta para comment pelo numeric id,
            // buscamos os 100 comentários e filtramos localmente.
            const res = await graphqlWithAuth(query, { owner, repo, commentId: parseInt(commentIdNumeric) });

            const comments = res.repository.discussionComments.nodes;
            const commentNode = comments.find(c => c.databaseId === parseInt(commentIdNumeric));

            if (!commentNode) {
              console.error("Comentário não encontrado com ID numérico:", commentIdNumeric);
              process.exit(1);
            }

            const commentNodeId = commentNode.id;
            let previews = "";

            // 2. Extrair links do comentário original
            const urls = [...originalBody.matchAll(/https?:\/\/[^\s)]+/g)].map(m => m[0]);

            for (const url of urls) {
              try {
                const resp = await fetch(url);
                const text = await resp.text();
                const dom = new JSDOM(text);
                let title = dom.window.document.querySelector('meta[property="og:title"]')?.getAttribute('content')
                  || dom.window.document.title
                  || url;

                previews += `> **${title}**\n> ${url}\n\n`;
              } catch {
                console.error(`Erro ao buscar ${url}`);
              }
            }

            // 3. Remover previews antigos do corpo
            const cleanBody = originalBody.replace(/^>.*(\n|$)/gm, "").trim();

            // 4. Montar novo corpo
            const newBody = `${cleanBody}\n\n${previews}`;

            // 5. Atualizar o comentário via mutation
            const mutation = `
              mutation($commentId: ID!, $body: String!) {
                updateDiscussionComment(input: {commentId: $commentId, body: $body}) {
                  comment {
                    id
                    body
                  }
                }
              }
            `;

            const updateRes = await graphqlWithAuth(mutation, { commentId: commentNodeId, body: newBody });

            console.log("Comentário atualizado com sucesso:", updateRes.updateDiscussionComment.comment.id);
          }

          run().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOF
